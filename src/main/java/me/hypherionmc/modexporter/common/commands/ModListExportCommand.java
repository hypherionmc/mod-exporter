package me.hypherionmc.modexporter.common.commands;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.exceptions.CommandSyntaxException;
import me.hypherionmc.modexporter.utils.HastebinAPI;
import net.minecraft.commands.CommandSourceStack;
import net.minecraft.commands.Commands;
import net.minecraft.commands.arguments.MessageArgument;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.TranslatableComponent;
import net.minecraftforge.fml.ModList;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.nio.charset.StandardCharsets;

public class ModListExportCommand {

    public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
        LiteralArgumentBuilder<CommandSourceStack> modlistExportCommand =
                Commands.literal("modlist")
                .requires((commandSource -> commandSource.hasPermission(4)))
                .then(Commands.argument("type", MessageArgument.message()).executes(ModListExportCommand::exportModlist));

        dispatcher.register(modlistExportCommand);
    }

    private static int exportModlist(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
        Component type = MessageArgument.getMessage(context, "type");
        String typeString = type.getString();

        if (typeString.equalsIgnoreCase("file")) {

            StringBuilder builder = new StringBuilder();
            builder.append("<h2>Installed Mods</h2>").append(System.lineSeparator());
            builder.append("<ul>").append(System.lineSeparator());

            ModList.get().getMods().forEach(mod -> {
                if (!mod.getDisplayName().equalsIgnoreCase("minecraft") && !mod.getDisplayName().equalsIgnoreCase("forge")) {
                    builder.append("<li>").append(mod.getDisplayName()).append(" - ").append(mod.getOwningFile().getFile().getFileName()).append("</li>").append(System.lineSeparator());
                }
            });

            builder.append("</ul>").append(System.lineSeparator());
            builder.append("Generated by Mod Exporter");

            try {
                FileUtils.writeStringToFile(new File("modlist-export.html"), builder.toString(), StandardCharsets.UTF_8);
                context.getSource().sendSuccess(new TranslatableComponent("commands.modlist.exported"), true);
                return 1;
            } catch (Exception e) {
                e.printStackTrace();
                context.getSource().sendFailure(new TranslatableComponent("commands.modlist.failed"));
            }

        } else if (typeString.equalsIgnoreCase("paste")) {
            StringBuilder builder = new StringBuilder();
            builder.append("Installed Mods").append(System.lineSeparator());

            ModList.get().getMods().forEach(mod -> {
                if (!mod.getDisplayName().equalsIgnoreCase("minecraft") && !mod.getDisplayName().equalsIgnoreCase("forge")) {
                    builder.append(mod.getDisplayName()).append(" - ").append(mod.getOwningFile().getFile().getFileName()).append(System.lineSeparator());
                }
            });

            builder.append("Generated by Mod Exporter");

            String pasteUrl = HastebinAPI.addToPaste(builder.toString());
            if (pasteUrl.isEmpty()) {
                context.getSource().sendFailure(new TranslatableComponent("commands.modlist.pastefail"));
            } else {
                String pasteTranslated = new TranslatableComponent("commands.modlist.pasted").getString().replace("${url}", pasteUrl);
                context.getSource().sendSuccess(new TranslatableComponent(pasteTranslated), true);
            }
        } else {
            context.getSource().sendSuccess(new TranslatableComponent("commands.modlist.usage"), false);
        }
        return 1;

    }
}
